{"version":3,"sources":["Firebase/firebase.js","Tabelas/linhaPaciente.js","Paginas/Cuidador.js","Cadastro/CadastroPaciente.js","Cadastro/Cadastro.js","Login/Login.js","Tabelas/linhaLembranca.js","Stores/userStore.js","Stores/lembrancaStore.js","Stores/rootStore.js","Utils/getContentType.js","Paciente/Paciente.js","Game.js","Utils/getDate.js","Tabelas/linhaPacienteMedico.js","Paginas/Medico.js","Tabelas/linhaScore.js","Utils/getScores.js","Paciente/Scores.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","storageRef","storage","ref","LinhaPaciente","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","routeChange","e","id","target","_this$props","history","paciente","push","pathname","state","react_default","a","createElement","nome","peso","cpf","data","Button","className","onClick","Component","withRouter","Cuidador","rows","Container","Table","scope","map","row","index","linhaPaciente","key","_this2","userValues","localStorage","getItem","JSON","parse","once","then","snapshot","pacientes","val","_arr","entries","_i","length","infos","mergedPaciente","assign","setState","CadastroPaciente","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","_this$state","user","wrap","_context","prev","next","preventDefault","auth","currentUser","uid","values","value","cuidador","child","set","userValuesObj","tipo","error","alert","stop","_x","apply","arguments","handleControl","_e$target","defineProperty","Form_default","onSubmit","FormGroup","FormControl","type","placeholder","onChange","Button_default","Cadastro","email","senha","createUserWithEmailAndPassword","authUser","autoComplete","as","Login","handleChange","signInWithEmailAndPassword","makeLogin","_ref2","_callee2","_context2","userID","setItem","stringify","_x2","Group","controlId","Control","autoFocus","password","disabled","validateForm","LinhaLembranca","lembraca","lembracaUrl","lembrancaType","lembracaPreview","width","height","src","alt","lib","playsInline","fluid","desc","path","getDownloadURL","url","catch","code","console","log","UserStore","rootStore","initializerDefineProperty","_descriptor","_descriptor2","observable","action","computed","LembracaStore","lembrancaStore_descriptor","lembrancaStore_descriptor2","_descriptor3","lembrancaList","p","Stores_rootStore","RootStore","userStore","lembrancaStore","getContentType","str","_str$match","match","slicedToArray","store","Paciente","observer","handleClose","show","handleShow","file","lembracas","location","customMetadata","uploading","put","updateMetadata","fullPath","sent","addlembranca","t0","handleFile","files","closebutton","uploadbutton","react_loader_spinner_default","color","variant","objectRow","linhaLembranca","Modal","onHide","Header","closeButton","Title","Body","es_Form","Footer","clearAll","lembrancas","viewWidth","window","innerWidth","viewHeight","innerHeight","Game","handleFrameTasks","fnName","ready","gameSpecs","sender","ifr","contentWindow","postMessage","jsonData","params","gameData","today","Date","dd","getDate","mm","getMonth","getFullYear","onWindowResize","frame","f","title","_this3","onload","addEventListener","removeEventListener","_this4","_snapshot$val","arrayLembrancas","lembrancaCount","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_l$","lembracaStr","concat","lembracaObj","_iterator","Symbol","iterator","done","err","return","LinhaPacienteMedico","Medico","linhaPacienteMedico","LinhaScore","jogos","score","numLembracas","gapCorreto","gapSelecionado","Score","linhaScore","jogosInfos","routing","index_module","react_router_dom","react_router","exact","component","Scores","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f8bc408.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\nimport 'firebase/auth';\r\n\r\n// Export all the need references to the firebase\r\nconst config = {\r\n    apiKey: \"AIzaSyBpZOq7d6dCnbTkadvh1Sy8IgWUGGE7GiE\",\r\n    authDomain: \"memento-7e2ff.firebaseapp.com\",\r\n    databaseURL: \"https://memento-7e2ff.firebaseio.com\",\r\n    projectId: \"memento-7e2ff\",\r\n    storageBucket: \"memento-7e2ff.appspot.com\",\r\n    messagingSenderId: \"411058854398\"\r\n\r\n};\r\n\r\nconst app = firebase.initializeApp(config);\r\nconst database = app.database();\r\nconst storageRef = app.storage().ref();\r\n\r\n\r\nexport  { app, database, storageRef };","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { withRouter } from \"react-router\";\r\n\r\n// A simple line with the info about the paciente that is under the care of the user\r\nclass LinhaPaciente extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            paciente : props.paciente\r\n        }\r\n    }\r\n\r\n    routeChange = (e) => {\r\n        const { id } = e.target;\r\n        const { history, paciente } = this.props;\r\n\r\n        if(id === 'acessar') {\r\n            history.push({pathname: '/paciente',  state: {\r\n                paciente\r\n              }});\r\n        }\r\n\r\n        if(id === 'jogar') {\r\n            history.push({pathname: '/jogar',  state: {\r\n                paciente\r\n              }});\r\n        }\r\n       \r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <tr>\r\n                <td>{this.state.paciente.nome}</td>\r\n                <td>{this.state.paciente.peso}</td>\r\n                <td>{this.state.paciente.cpf}</td>\r\n                <td>{this.state.paciente.data}</td>\r\n                <td>\r\n                    <Button id=\"acessar\" className=\"btn btn-primary\"   onClick={this.routeChange}>\r\n                        Acessar\r\n                    </Button>\r\n                </td>\r\n                <td>\r\n                    <Button id=\"jogar\" className=\"btn btn-primary\"   onClick={this.routeChange}>\r\n                        Jogar     \r\n                    </Button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(LinhaPaciente);","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport {  database } from '../Firebase/firebase';\r\nimport { Table, Button, Container } from \"react-bootstrap\";\r\nimport LinhaPaciente from \"../Tabelas/linhaPaciente\";\r\n\r\nclass Cuidador extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: []\r\n        }\r\n    }\r\n\r\n    routeChange = () => {\r\n        const { history } = this.props;\r\n        history.push('/cadastropaciente');\r\n    }\r\n\r\n\r\n    render() {\r\n       \r\n        return (\r\n            <Container>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Nome</th>\r\n                        <th scope=\"col\">Peso</th>\r\n                        <th scope=\"col\">CPF</th>\r\n                        <th scope=\"col\">Data nascimento</th>\r\n                        <th scope=\"col\">Acesso ao paciente</th>\r\n                        <th scope=\"col\">Jogar</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{\r\n                    this.state.rows.map((row, index) => {\r\n                       return <LinhaPaciente key={index} paciente={row}/>\r\n                })}</tbody>\r\n            </Table>\r\n            \r\n                 <Button className=\"btn btn-primary\"   onClick={this.routeChange}>    \r\n         \r\n                    Cadastrar paciente\r\n                </Button>\r\n            </Container>\r\n           \r\n\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userValues = localStorage.getItem('user');\r\n        const userValuesObj = JSON.parse(userValues);\r\n        const { id } = userValuesObj;\r\n\r\n        database.ref('users/' + id)\r\n            .once('value')\r\n            .then((snapshot) => {\r\n                const { pacientes } = snapshot.val();\r\n                const arrayPaci = Object.entries(pacientes);\r\n                const rows = [];\r\n\r\n                for (const paciente of arrayPaci) {\r\n                    const infos = paciente[1];\r\n                    const key = {\r\n                        key: paciente[0]\r\n                    }\r\n\r\n                    const mergedPaciente = Object.assign(infos, key);\r\n                    rows.push(mergedPaciente);\r\n\r\n                   \r\n                }\r\n\r\n                this.setState({\r\n                    rows: rows\r\n                })\r\n            });\r\n    }\r\n}\r\n\r\nexport default withRouter(Cuidador);","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { FormGroup, FormControl } from 'react-bootstrap';\r\nimport { app, database } from '../Firebase/firebase';\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass CadastroPaciente extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: '',\r\n            nome: '',\r\n            cpf: '',\r\n            peso: ''\r\n        };\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n        const { data, nome, cpf, peso } = this.state;\r\n        const { history } = this.props;\r\n\r\n        try {\r\n            // Get the current user id, then set the new \"paciente\" to its object in the firebase\r\n            const user = app.auth().currentUser\r\n\r\n            database.ref('users/' + user.uid + '/pacientes')\r\n            .push({\r\n                nome,\r\n                data,\r\n                cpf,\r\n                peso\r\n\r\n            })\r\n            .then(values => {\r\n                const key = values.key;\r\n                const value = {nome,\r\n                    data,\r\n                    cpf,\r\n                    peso,\r\n                    cuidador: user.uid};\r\n\r\n                database.ref('pacientes/')\r\n                .child(key)\r\n                .set(value)\r\n                .then(() => {\r\n                   const userValues = localStorage.getItem('user');\r\n                   const userValuesObj = JSON.parse(userValues);\r\n\r\n                   history.push('/' + userValuesObj.tipo);\r\n                });\r\n            });\r\n\r\n\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }\r\n\r\n    handleControl = (e) => {\r\n        const { value, id } = e.target;\r\n        this.setState({ [id]: value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <FormControl type=\"name\" id=\"nome\" placeholder=\"Jose da Silva\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"text\" id=\"peso\" placeholder=\"peso\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"text\" id=\"cpf\" placeholder=\"CPF\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"date\" id=\"data\" placeholder=\"Data nascimento\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n\r\n                <Button type=\"submit\"> Cadastar </Button>\r\n            </Form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(CadastroPaciente);","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { FormGroup, FormControl } from 'react-bootstrap';\r\nimport { app, database } from '../Firebase/firebase';\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass Cadastro extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            senha: '',\r\n            data: '',\r\n            nome: '',\r\n            cpf: '',\r\n            tipo: '',\r\n            pacientes: ''\r\n        };\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n        const { email, senha, data, nome, cpf, tipo, pacientes } = this.state;\r\n        \r\n        //Try to push data to the firebase after it creates a user by the default google createUser's\r\n\r\n        try {\r\n            app.auth()\r\n                .createUserWithEmailAndPassword(email, senha)\r\n                .then(authUser => {\r\n                    // Create a user in your Firebase realtime database\r\n                    return database.ref('users/' + authUser.user.uid).set({\r\n                      nome,\r\n                      email,\r\n                      data,\r\n                      cpf,\r\n                      tipo,\r\n                      pacientes\r\n                });\r\n            })\r\n            this.props.history.push(\"/\");\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }\r\n\r\n    handleControl = (e) => {\r\n        // For each element in the from we have a id that matches the state, so we onde uses the id string to set the value\r\n        const { value, id } = e.target;\r\n        this.setState({ [id]: value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <FormControl type=\"email\" autoComplete=\"email\" id=\"email\" placeholder=\"name@example.com\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"password\" id=\"senha\" placeholder=\"senha\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"name\" id=\"nome\" placeholder=\"Nome\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"text\" id=\"cpf\" placeholder=\"CPF\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"date\" id=\"data\" placeholder=\"Data nascimento\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl as=\"select\" id=\"tipo\" onChange={this.handleControl} onClick={this.handleControl}>\r\n                        <option>Medico</option>\r\n                        <option>Cuidador</option>\r\n                    </FormControl>\r\n                </FormGroup>\r\n                <Button type=\"submit\"> Cadastar </Button>\r\n            </Form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Cadastro);","import React, { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { withRouter } from \"react-router\";\r\nimport { app, database } from '../Firebase/firebase';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.props = props;\r\n\r\n        this.state = {\r\n            email: '',\r\n            senha: ''\r\n        };\r\n    }\r\n\r\n    validateForm() {\r\n        return this.state.email.length > 0 && this.state.senha.length > 0;\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        const { email, senha } = this.state;\r\n\r\n        // Try to login with the google default sing in\r\n        try {\r\n           app.auth()\r\n                .signInWithEmailAndPassword(email, senha)\r\n                .then(authUser => this.makeLogin(authUser.user.uid));\r\n        } catch (error) {\r\n            alert(email, senha);\r\n        }\r\n    }\r\n\r\n    makeLogin = async uid => {\r\n        const { history } = this.props;\r\n\r\n        // Set the user to the localStore for future usage, and do not lost the reference case its become offline\r\n        database.ref('users/' + uid)\r\n            .once('value')\r\n            .then((snapshot) => {\r\n                const { tipo } = snapshot.val();\r\n                const value = snapshot.val();\r\n                const userID = {id: uid};\r\n                const userValues = Object.assign(value, userID);\r\n\r\n\r\n                localStorage.setItem('user', JSON.stringify(userValues));\r\n\r\n                history.push('/' + tipo);\r\n              \r\n            });\r\n\r\n    }\r\n\r\n    routeChange = () => {\r\n        const { history } = this.props;\r\n        history.push('/cadastro');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Login\">\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <Form.Group controlId=\"email\" >\r\n                        <Form.Control\r\n                            autoFocus\r\n                            type=\"email\"\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"senha\" >\r\n                        <Form.Control\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            type=\"password\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Button\r\n\r\n                        className=\"btn btn-primary\"\r\n                        disabled={!this.validateForm()}\r\n                        type=\"submit\"\r\n                    >\r\n                        Login\r\n          </Button>\r\n                    <Button\r\n                        className=\"btn btn-primary\"\r\n                        onClick={this.routeChange}>\r\n                        Cadastrar\r\n          </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);","import React, { Component } from 'react';\r\nimport { storageRef } from '../Firebase/firebase';\r\nimport { withRouter } from \"react-router\";\r\nimport { Player } from 'video-react';\r\nimport 'video-react/dist/video-react.css'; // import css\r\n\r\n// A line in the paciente table, this line show the content and information form the uploaded file\r\nclass LinhaLembranca extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            paciente: props.lembraca,\r\n            lembracaUrl: '',\r\n            lembrancaType: ''\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { lembracaUrl, lembrancaType } = this.state;\r\n        let lembracaPreview;\r\n\r\n        if(lembrancaType === 'img') {\r\n            lembracaPreview = <img width=\"100\" height=\"100\" src={lembracaUrl} alt=\"lembrança\"></img>;\r\n        }\r\n\r\n        if(lembrancaType === 'video') {\r\n            lembracaPreview = <Player\r\n            playsInline fluid={false} width={100} height={100}\r\n            src={lembracaUrl}\r\n          />;\r\n        }\r\n        return (\r\n            <tr>\r\n                <td> {lembracaPreview}</td>\r\n                <td>{this.state.paciente.desc}</td>\r\n                <td>{this.state.paciente.data}</td>\r\n\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Create a reference to the file we want to download\r\n        const lembrancaRef = storageRef.child(this.state.paciente.path);\r\n\r\n    \r\n        // Get the download URL\r\n        lembrancaRef.getDownloadURL().then( (url)  => {\r\n            const { type } = this.state.paciente;\r\n            this.setState({\r\n               lembracaUrl: url,\r\n               lembrancaType: type\r\n            })\r\n        }).catch( (error) => {\r\n    \r\n            // A full list of error codes is available at\r\n            // https://firebase.google.com/docs/storage/web/handle-errors\r\n            switch (error.code) {\r\n                case 'storage/object-not-found':\r\n                    // File doesn't exist\r\n                    break;\r\n    \r\n                case 'storage/unauthorized':\r\n                    // User doesn't have permission to access the object\r\n                    break;\r\n    \r\n                case 'storage/canceled':\r\n                    // User canceled the upload\r\n                    break;\r\n    \r\n    \r\n                case 'storage/unknown':\r\n                    // Unknown error occurred, inspect the server response\r\n                    break;\r\n\r\n                default:\r\n                    console.log(error);\r\n            }\r\n        });\r\n         \r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(LinhaLembranca);","import { action, computed, observable } from 'mobx';\r\n\r\nclass UserStore {\r\n  @observable user;\r\n  \r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @action setUser = (user) => {\r\n    \tthis.user = user;\r\n  };\r\n\r\n  @computed get userTipo() {\r\n    return this.user.tipo;\r\n  }\r\n }\r\n\r\nexport default UserStore;","import { action, computed, observable } from 'mobx';\r\n\r\n// Store that will have all the lembracas from a given paciente\r\nclass LembracaStore{\r\n\r\n    @observable lembrancaList = [];\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n  \r\n    @action addlembranca = (p) => {\r\n        this.lembrancaList.push(p);\r\n    }\r\n\r\n    @action clearAll = () => {\r\n        this.lembrancaList = [];\r\n    }\r\n  \r\n    @computed get lembranca() {\r\n        return this.lembrancaList;\r\n      }\r\n  }\r\n\r\n  export default LembracaStore;","import UserStore from './userStore';\r\nimport LembracaStore from './lembrancaStore';\r\n\r\nclass RootStore {\r\n  constructor() {\r\n    this.userStore = new UserStore(this);\r\n    this.lembrancaStore = new LembracaStore(this);\r\n  }\r\n}\r\n\r\n\r\nexport default new RootStore();","export function getContentType (str) {\r\n    \r\n    let tipo;\r\n\r\n    // Regex to find what is the content to be showed\r\n    const regex = /image|video?/gi;\r\n    const [match] = str.match(regex)\r\n\r\n    if(match === 'image'){\r\n        tipo = 'img'\r\n\r\n    }\r\n\r\n    if(match === 'video'){\r\n        tipo = 'video'\r\n    }\r\n\r\n    return tipo;\r\n}","import React, { Component } from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { Table, Button, Container, Modal, FormGroup, FormControl, Form } from \"react-bootstrap\";\r\nimport { storageRef, database } from '../Firebase/firebase';\r\nimport LinhaLembranca from '../Tabelas/linhaLembranca';\r\nimport Loader from 'react-loader-spinner';\r\nimport rootStore from '../Stores/rootStore';\r\nimport { observer} from 'mobx-react';\r\nimport { getContentType } from '../Utils/getContentType';\r\n\r\nconst store = rootStore;\r\n\r\n// Set a store to the pacientes, it will be needed for fast and live att of the current list of files (lembrancas)\r\n@observer\r\nclass Paciente extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            show: false,\r\n            data: '',\r\n            desc: '',\r\n            file: null,\r\n            uploading: false,\r\n            lembracas: []\r\n        }\r\n\r\n    }\r\n\r\n    // Handlers for the Modal of upload\r\n    handleClose = () => {\r\n        this.setState({ show: false });\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n        const { key } = this.props.location.state.paciente;\r\n        const { desc, data, file } = this.state;\r\n\r\n        try {\r\n\r\n            let { type } = file;\r\n\r\n            const lembracas = {\r\n                customMetadata: {\r\n                    desc,\r\n                    data\r\n                }\r\n            }\r\n\r\n            // Set its state to uploading, to show the sppiner and the user knows that the file is in upload\r\n            this.setState({\r\n                uploading: true\r\n            })\r\n\r\n            await storageRef.child('lembrancas/' + key + '/' + desc).put(file, lembracas).then(() => {\r\n                storageRef.child('lembrancas/' + key + '/' + desc).updateMetadata(lembracas);\r\n            });\r\n\r\n            const path = await storageRef.child('lembrancas/' + key + '/' + desc).fullPath;\r\n\r\n            await database.ref('pacientes/' + key + '/lembracas').push({\r\n                desc,\r\n                data,\r\n                path,\r\n                type: getContentType(type)\r\n            })\r\n\r\n            // Add a new lembranca to the store, it will force the componente to render\r\n            // Inplies in a live lembracas table\r\n            store.lembrancaStore.addlembranca({\r\n                desc,\r\n                data,\r\n                path,\r\n                type: getContentType(type)\r\n            });\r\n\r\n            // Hide the modal and the spinner, the upload is done\r\n            this.setState({\r\n                uploading: false,\r\n                show: false\r\n            })\r\n\r\n            \r\n\r\n\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    handleControl = (e) => {\r\n        const { value, id } = e.target;\r\n        this.setState({ [id]: value });\r\n    }\r\n\r\n    handleFile = (e) => {\r\n        const file = e.target.files[0];\r\n\r\n        if (file) {\r\n            this.setState({ file: file });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { nome } = this.props.location.state.paciente;\r\n        let closebutton;\r\n        let uploadbutton;\r\n\r\n       \r\n\r\n        if (this.state.uploading) {\r\n            closebutton = <Loader\r\n                type=\"Puff\"\r\n                color=\"#00BFFF\"\r\n                height=\"100\"\r\n                width=\"100\"\r\n            />;\r\n        } else {\r\n            closebutton = <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                Close\r\n                        </Button>;\r\n\r\n            uploadbutton =  <Button type=\"submit\" variant=\"primary\" onClick={this.handleSubmit}>\r\n                Upload\r\n\r\n            </Button>;\r\n        }\r\n\r\n        return (\r\n\r\n            <Container>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">{nome}</th>\r\n                            <th scope=\"col\">descrição</th>\r\n                            <th scope=\"col\">data</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>{\r\n                         store.lembrancaStore.lembrancaList.map((row, index) => {\r\n                            const {desc, path, data, type} = row;\r\n                            const objectRow = Object.assign({}, {desc, path, data, type});\r\n                            return <LinhaLembranca key={index} lembraca={objectRow} />\r\n                            \r\n                        })}</tbody>\r\n\r\n                </Table>\r\n\r\n                <Button className=\"btn btn-primary\" onClick={this.handleShow}>\r\n                    Upload de lembraca\r\n                </Button>\r\n\r\n                <Modal show={this.state.show} onHide={this.handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Upload de lembraça</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <FormControl type=\"text\" id=\"desc\" placeholder=\"Decrição da lembraça\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <FormControl type=\"date\" id=\"data\" placeholder=\"Data de ocorrencia\" onChange={this.handleControl} onClick={this.handleControl}></FormControl>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <FormControl type=\"file\" id=\"file\" placeholder=\"Selecione a lembrança\" onChange={this.handleFile} onClick={this.handleFile}></FormControl>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {closebutton}\r\n                        {uploadbutton}\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n            </Container>\r\n        )\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { key } = this.props.location.state.paciente;\r\n\r\n        rootStore.lembrancaStore.clearAll();\r\n        // Populates the store with the lembrancas allready uploaded to this paciente\r\n        database.ref('pacientes/' + key)\r\n            .once('value')\r\n            .then((snapshot) => {\r\n                const { lembracas } = snapshot.val();\r\n\r\n                if (lembracas) {\r\n\r\n                    const arrayLembrancas = Object.entries(lembracas);\r\n                    const lembrancas = [];\r\n\r\n                    for (const lembraca of arrayLembrancas) {\r\n                        const infos = lembraca[1];\r\n\r\n                        lembrancas.push(infos);\r\n                        store.lembrancaStore.addlembranca(infos);\r\n\r\n                    }\r\n\r\n                    this.setState({\r\n                        lembracas: lembrancas\r\n                    })\r\n                }\r\n            });\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default withRouter(Paciente);","import React, { Component } from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { database, storageRef } from './Firebase/firebase';\r\nimport Loader from 'react-loader-spinner';\r\nimport { getDate } from './Utils/getDate';\r\n\r\nlet viewWidth = window.innerWidth;\r\nlet viewHeight = window.innerHeight;\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ready: false,\r\n      gameSpecs: {}\r\n    }\r\n\r\n  }\r\n\r\n  // Handle called after a message from the iframe (game)\r\n  handleFrameTasks = (e) => {\r\n    const { fnName } = e.data;\r\n    const { ready, gameSpecs } = this.state;\r\n    const { history } = this.props;\r\n\r\n    // Here we need to check if the fnName is that one, it secure that the game is allreadt loaded and the data for it is done\r\n    if (fnName === 'returnJson' && ready) {\r\n\r\n      // Simulate a message type for the Rex_FrameMessage addon in the construct game\r\n      const CMD_FNRTN = \"Rex_FrameMessage.Return\";\r\n      const data = {\r\n        \"type\": CMD_FNRTN,\r\n        \"sender\": '\"\"',\r\n        \"fnName\": 'returnJson',\r\n        \"value\": JSON.stringify(gameSpecs)\r\n      };\r\n\r\n      this.ifr.contentWindow.postMessage(data, \"*\");\r\n    }\r\n\r\n    if (fnName === 'endGame' && ready) {\r\n\r\n      const { data } = e;\r\n      const [jsonData] = data.params;\r\n\r\n      const gameData = JSON.parse(jsonData);\r\n      const date = getDate();\r\n      const { key } = this.props.location.state.paciente;\r\n      \r\n      database.ref('pacientes/' + key + '/jogos').push({\r\n        gameData\r\n    }).then(() => {\r\n      alert('jogo salvo');\r\n      history.push('/Cuidador');\r\n    });\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    viewWidth = window.innerWidth;\r\n    viewHeight = window.innerHeight;\r\n\r\n    this.ifr.width = viewWidth;\r\n    this.ifr.height = viewHeight;\r\n\r\n  }\r\n\r\n  render() {\r\n    const { ready } = this.state;\r\n    let frame;\r\n\r\n    if (ready) {\r\n      frame = <iframe ref={(f) => this.ifr = f} id=\"game\" title=\"game\" src=\"../game/\" width={viewWidth} height={viewHeight}></iframe>;\r\n    }\r\n\r\n    if (!ready) {\r\n      frame = <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height=\"100\"\r\n        width=\"100\"\r\n      />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {frame}\r\n      </div>);\r\n  }\r\n\r\n  // After the component update, load all the data for the game we set a listner for the ifram messages\r\n  componentDidUpdate() {\r\n\r\n    if (this.ifr) {\r\n\r\n      this.ifr.onload = () => {\r\n        window.addEventListener(\"message\", this.handleFrameTasks);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"message\", this.handleFrameTasks);\r\n    window.removeEventListener('resize', this.onWindowResize);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { key } = this.props.location.state.paciente;\r\n    database.ref('pacientes/' + key)\r\n      .once('value')\r\n      .then((snapshot) => {\r\n        const { lembracas, nome, cpf } = snapshot.val();\r\n        let gameSpecs = {};\r\n\r\n        if (lembracas) {\r\n\r\n          const arrayLembrancas = Object.entries(lembracas);\r\n          let lembrancaCount = arrayLembrancas.length;\r\n\r\n\r\n          gameSpecs = Object.assign({}, { nome: nome, cpf: cpf, size: lembrancaCount - 1 });\r\n\r\n\r\n          for (const [index, l] of arrayLembrancas.entries()) {\r\n            const { path, desc, data, type } = l[1];\r\n\r\n\r\n            // Create a reference to the file we want to download\r\n            const lembrancaRef = storageRef.child(path);\r\n\r\n\r\n            // Get the download URL\r\n            lembrancaRef.getDownloadURL().then((url) => {\r\n              const lembracaStr = `{\"${index}\":{\"desc\": \"${desc}\", \"data\": \"${data}\", \"type\": \"${type}\", \"url\": \"${url}\"}}`;\r\n              const lembracaObj = JSON.parse(lembracaStr);\r\n\r\n              gameSpecs = Object.assign(gameSpecs, lembracaObj);\r\n\r\n              lembrancaCount--;\r\n\r\n              if (!lembrancaCount) {\r\n\r\n                this.setState({\r\n                  ready: true,\r\n                  gameSpecs: gameSpecs\r\n                });\r\n\r\n                window.addEventListener('resize', this.onWindowResize, false);\r\n\r\n              }\r\n\r\n            }).catch((error) => {\r\n              console.log(error);\r\n            });\r\n\r\n          }\r\n\r\n\r\n        }\r\n\r\n\r\n      });\r\n\r\n  }\r\n}\r\n\r\nexport default withRouter(Game);\r\n","export function getDate() {\r\n    let today = new Date();\r\n    let dd = today.getDate();\r\n    let mm = today.getMonth() + 1; //January is 0!\r\n\r\n    let yyyy = today.getFullYear();\r\n    if (dd < 10) {\r\n        dd = '0' + dd;\r\n    }\r\n    if (mm < 10) {\r\n        mm = '0' + mm;\r\n    }\r\n    return dd + '/' + mm + '/' + yyyy;\r\n}","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { withRouter } from \"react-router\";\r\n\r\n// A simple line with the info about the paciente that is under the care of the user\r\nclass LinhaPacienteMedico extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            paciente : props.paciente\r\n        }\r\n    }\r\n\r\n    routeChange = (e) => {\r\n        const { id } = e.target;\r\n        const { history, paciente } = this.props;\r\n\r\n        if(id === 'acessar') {\r\n            history.push({pathname: '/paciente',  state: {\r\n                paciente\r\n              }});\r\n        }\r\n\r\n        \r\n        if(id === 'acessarJogos') {\r\n            history.push({pathname: '/jogos',  state: {\r\n                paciente\r\n              }});\r\n        }\r\n\r\n        if(id === 'jogar') {\r\n            history.push({pathname: '/jogar',  state: {\r\n                paciente\r\n              }});\r\n        }\r\n       \r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <tr>\r\n                <td>{this.state.paciente.nome}</td>\r\n                <td>{this.state.paciente.peso}</td>\r\n                <td>{this.state.paciente.cpf}</td>\r\n                <td>{this.state.paciente.data}</td>\r\n                <td>\r\n                    <Button id=\"acessar\" className=\"btn btn-primary\"   onClick={this.routeChange}>\r\n                        Acessar\r\n                    </Button>\r\n                </td>\r\n                <td>\r\n                    <Button id=\"acessarJogos\" className=\"btn btn-primary\"   onClick={this.routeChange}>\r\n                        Acessar\r\n                    </Button>\r\n                </td>\r\n                <td>\r\n                    <Button id=\"jogar\" className=\"btn btn-primary\"   onClick={this.routeChange}>\r\n                        Jogar     \r\n                    </Button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(LinhaPacienteMedico);","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport {  database } from '../Firebase/firebase';\r\nimport { Table, Container } from \"react-bootstrap\";\r\nimport LinhaPacienteMedico from \"../Tabelas/linhaPacienteMedico\";\r\n\r\nclass Medico extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: []\r\n        }\r\n    }\r\n\r\n   \r\n\r\n\r\n    render() {\r\n       \r\n        return (\r\n            <Container>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Nome</th>\r\n                        <th scope=\"col\">Peso</th>\r\n                        <th scope=\"col\">CPF</th>\r\n                        <th scope=\"col\">Data nascimento</th>\r\n                        <th scope=\"col\">Acesso as lembraças</th>\r\n                        <th scope=\"col\">Acesso as scores</th>\r\n                        <th scope=\"col\">Jogar</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{\r\n                    this.state.rows.map((row, index) => {\r\n                       return <LinhaPacienteMedico key={index} paciente={row}/>\r\n                })}</tbody>\r\n            </Table>\r\n            \r\n               \r\n            </Container>\r\n           \r\n\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n   \r\n        database.ref('pacientes')\r\n            .once('value')\r\n            .then((snapshot) => {\r\n                const pacientes = snapshot.val();\r\n                const arrayPaci = Object.entries(pacientes);\r\n                const rows = [];\r\n\r\n                for (const paciente of arrayPaci) {\r\n                    const infos = paciente[1];\r\n                    const key = {\r\n                        key: paciente[0]\r\n                    }\r\n\r\n                    const mergedPaciente = Object.assign(infos, key);\r\n                    rows.push(mergedPaciente);\r\n\r\n                   \r\n                }\r\n\r\n                this.setState({\r\n                    rows: rows\r\n                })\r\n            });\r\n    }\r\n}\r\n\r\nexport default withRouter(Medico);","import React, { Component } from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { getScore } from '../Utils/getScores';\r\n\r\nclass LinhaScore extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            jogos : props.jogos.gameData,\r\n            score: 0,\r\n            numLembracas: 0,\r\n            ready: false\r\n        }\r\n    }\r\n\r\n  \r\n    render () {\r\n        let value;\r\n\r\n        if(this.state.ready) {\r\n            value =  <td>Score: {this.state.score} Número de lembraças: {this.state.numLembracas}</td>\r\n        }\r\n        return (\r\n            <tr>\r\n              {value}\r\n      \r\n            </tr>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        let score = 0;\r\n        let numLembracas = 0;\r\n        for (const data of this.state.jogos) {\r\n            \r\n            score += getScore(data);\r\n            numLembracas++;\r\n        }\r\n        \r\n        this.setState({\r\n            score: score,\r\n            numLembracas: numLembracas,\r\n            ready: true\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(LinhaScore);","export function getScore(gameData) {\r\n   const { gapCorreto, gapSelecionado } = gameData;\r\n   \r\n   if (gapCorreto === gapSelecionado) return 1;\r\n\r\n   return 0;\r\n}","import React, { Component } from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { Table, Container } from \"react-bootstrap\";\r\nimport { database } from '../Firebase/firebase';\r\nimport LinhaScore from '../Tabelas/linhaScore';\r\n\r\n\r\n\r\nclass Score extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n           jogos: []\r\n        }\r\n\r\n    }\r\n\r\n   \r\n    render() {\r\n        const { nome } = this.props.location.state.paciente;\r\n \r\n        return (\r\n\r\n            <Container>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">{nome}</th>\r\n                           \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>{\r\n                         this.state.jogos.map((row, index) => {\r\n                           return <LinhaScore key={index} jogos={row} /> \r\n                        })}</tbody>\r\n\r\n                </Table>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { key } = this.props.location.state.paciente;\r\n\r\n        // Populates the store with the lembrancas allready uploaded to this paciente\r\n        database.ref('pacientes/' + key)\r\n            .once('value')\r\n            .then((snapshot) => {\r\n                const { jogos } = snapshot.val();\r\n\r\n                if (jogos) {\r\n\r\n                    const arrayJogos = Object.entries(jogos);\r\n                    const jogosInfos = [];\r\n                    \r\n                    for (const j of arrayJogos) {\r\n                        const infos = j[1];\r\n\r\n                        jogosInfos.push(infos);\r\n                    }\r\n\r\n                    this.setState({\r\n                        jogos: jogosInfos\r\n                    })\r\n                }\r\n            });\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default withRouter(Score);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport {Provider} from \"mobx-react\";\r\n\r\nimport './index.css';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Cuidador from './Paginas/Cuidador';\r\nimport CadastroPaciente from './Cadastro/CadastroPaciente';\r\nimport Cadastro from './Cadastro/Cadastro'\r\nimport Login from './Login/Login'\r\nimport Paciente from './Paciente/Paciente';\r\nimport Game from './Game';\r\nimport Medico from './Paginas/Medico'\r\nimport Scores from './Paciente/Scores';\r\n\r\nimport rootStore from './Stores/rootStore';\r\n \r\n\r\nconst routing = (\r\n    <Provider store={rootStore}>\r\n        <Router>\r\n            <Route exact path=\"/\" component={Login} />\r\n            <Route exact path=\"/cadastro\" component={Cadastro} />\r\n            <Route exact path=\"/cuidador\" component={Cuidador} />\r\n            <Route exact path=\"/cadastropaciente\"  component={CadastroPaciente}/>\r\n            <Route exact path=\"/paciente\"  component={Paciente}/>\r\n            <Route exact path=\"/jogar\"  component={Game}/>\r\n            <Route exact path=\"/jogos\"  component={Scores}/>\r\n            <Route exact path=\"/medico\"  component={Medico}/>\r\n        </Router>\r\n    </Provider>\r\n)\r\n\r\n\r\nReactDOM.render(routing, document.getElementById('root'))"],"sourceRoot":""}