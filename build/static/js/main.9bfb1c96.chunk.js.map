{"version":3,"sources":["Components/_shared/ButtonLink.js","utils/mediaQuery.js","config/breakpoints.js","Components/_shared/Container.js","Components/Logo/index.js","stores/mementoStore.js","services/firebase.js","utils/getContentType.js","stores/userStore.js","stores/rootStore.js","stores/hooks/useStore.js","layout/index.js","Components/Login/Login.js","Components/Register/RegisterPatient.js","Components/TableRows/PatientRow.js","Components/Paginas/CareGiver.js","Components/TableRows/DoctorPatientRow.js","Components/Paginas/Doctor.js","Components/TableRows/MementoRow.js","Components/Patient/Patient.js","Components/TableRows/ScoreRow.js","Components/Patient/Scores.js","Components/Register/Register.js","utils/getScores.js","Game.js","routes/PrivateRoute.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomLink","styled","Link","CustomButton","Button","ButtonLink","to","label","props","mediaQuery","mapValues","sm","md","lg","xl","w","Container","div","Wrapper","Title","span","index","size","icon","faBrain","Lembraca","types","model","desc","maybe","string","data","path","type","LembracaStore","lembrancaList","array","optional","actions","self","addlembranca","p","push","clearAll","clear","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","app","firebase","initializeApp","database","storageRef","storage","ref","getContentType","str","match","Games","gameTime","dataSelecionada","numOfMementos","number","score","Memento","url","Patient","id","name","birthday","cpf","weight","scores","mementos","User","maybeNull","uid","patients","UserStore","user","token","loading","views","fetchUser","flow","once","snapshot","userSnapshot","val","pacientes","pacientesValues","Object","entries","careGiverPatients","filter","key","values","some","value","map","assign","console","error","message","addMemento","memento","file","Promise","resolve","reject","child","put","then","updateMetadata","fullPath","mementoRef","getDownloadURL","find","patient","addScore","gameData","initialize","login","email","password","auth","signInWithEmailAndPassword","authUser","response","logout","undefined","addPatient","newPatient","set","afterCreate","a","localStorage","getItem","autorun","setItem","removeItem","RootStore","userStore","lembrancaStore","create","useStore","Store","useIsAuthorized","store","useObserver","isAuthorized","Navbar","StyledContainer","ButtonWrapper","NameText","UserChildrenWrapper","Layout","children","useIsUserLoading","isAuth","color","height","width","Fragment","variant","onClick","StyledForm","Form","ButtonsControl","Login","Component","constructor","super","handleChange","event","this","setState","target","handleSubmit","preventDefault","state","history","alert","routeChange","validateForm","length","render","onSubmit","Logo","Group","controlId","Label","Control","autoFocus","onChange","className","disabled","form","withRouter","inject","observer","RegisterPatient","handleControl","e","FormGroup","FormControl","placeholder","required","LinhaPaciente","moment","format","Header","Icon","FontAwesomeIcon","CareGiver","handleClose","show","handleShow","rows","getSnapshot","faPlus","Table","striped","bordered","hover","scope","row","PatientRow","Modal","onHide","backdrop","keyboard","ModalHeader","closeButton","ModalTitle","ModalBody","LinhaPacienteMedico","Doctor","PreviewImg","img","PriviewVideo","video","MementoRow","preview","log","includes","src","alt","controls","React","useState","setShow","uploading","setUploading","setPatient","useForm","register","useParams","useEffect","formvalues","customMetadata","Body","accept","ScoreRow","Score","jogos","componentDidMount","params","userPatient","useHistory","isRegister","setIsRegister","createUserWithEmailAndPassword","autoComplete","as","defaultValue","getScore","gapCorreto","gapSelecionado","millisecondsToMinutesSeconds","ms","duration","fromMinutes","Math","floor","asMinutes","fromSeconds","asSeconds","viewWidth","window","innerWidth","viewHeight","innerHeight","Game","handleFrameTasks","fnName","ready","gameSpecs","sender","JSON","stringify","ifr","contentWindow","postMessage","jsonData","parse","confirm","arrayData","gameScore","Date","now","initGame","done","onWindowResize","f","title","componentDidUpdate","onload","addEventListener","componentWillUnmount","removeEventListener","shuffledMementos","shuffle","chunck","nome","lembracaStr","lembracaObj","PrivateRoute","component","rest","pathname","Routes","exact","Register","Caregiver","Scores","basePath","BASE_PATH","App","basename","rootStore","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.9bfb1c96.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CustomLink = styled(Link)`\r\n  text-decoration: none;\r\n`;\r\n\r\nconst CustomButton = styled(Button)`\r\n  width: 100%;\r\n  font-size: 1rem;\r\n`;\r\n\r\nconst ButtonLink = ({ to, label, ...props }) => {\r\n  return (\r\n    <>\r\n      <CustomLink to={to}>\r\n        <CustomButton {...props}>{label}</CustomButton>\r\n      </CustomLink>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ButtonLink;\r\n","import mapValues from \"lodash/mapValues\";\r\n\r\nimport breakpoints from \"../config/breakpoints\";\r\n\r\nexport const mediaQuery = mapValues(breakpoints, (w) => `(min-width: ${w}px)`);\r\n","export default {\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { mediaQuery } from \"../../utils/mediaQuery\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 0 0.5rem;\r\n  @media ${mediaQuery.md} {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 550px;\r\n  }\r\n\r\n  @media ${mediaQuery.lg} {\r\n    max-width: 1280px;\r\n  }\r\n`;\r\n","import { faBrain } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  color: white;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst index = () => {\r\n  return (\r\n    <Wrapper>\r\n      <FontAwesomeIcon size=\"2x\" icon={faBrain} />\r\n      <Title>Memento</Title>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import { types } from \"mobx-state-tree\"\r\n\r\nconst Lembraca = types.model({\r\n    desc: types.maybe(types.string),\r\n    data: types.maybe(types.string),\r\n    path: types.maybe(types.string),\r\n    type: types.maybe(types.string)\r\n});\r\n\r\n// Store that will have all the lembracas from a given paciente\r\nconst LembracaStore = types\r\n    .model({\r\n        lembrancaList: types.array(types.optional(Lembraca, {}))\r\n    })\r\n    .actions(self => ({\r\n        addlembranca(p) {\r\n            self.lembrancaList.push(p);\r\n        },\r\n        clearAll() {\r\n            self.lembrancaList.clear();\r\n        }\r\n    }))\r\n\r\nexport default LembracaStore;","import \"firebase/database\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/auth\";\r\n\r\nimport firebase from \"firebase/app\";\r\n\r\n// Export all the need references to the firebase\r\nconst config = {\r\n  apiKey: process.env.apiKey,\r\n  authDomain: process.env.authDomain,\r\n  databaseURL: process.env.databaseURL,\r\n  projectId: process.env.projectId,\r\n  storageBucket: process.env.storageBucket,\r\n  messagingSenderId: process.env.messagingSenderId,\r\n};\r\n\r\nconst app = firebase.initializeApp(config);\r\nconst database = app.database();\r\nconst storageRef = app.storage().ref();\r\n\r\nexport { app, database, storageRef };\r\n","export function getContentType(str) {\r\n  // Regex to find what is the content to be showed\r\n  const regex = /image|video?/gi;\r\n  const [match] = str.match(regex);\r\n\r\n  return match;\r\n}\r\n","import { autorun } from \"mobx\";\r\nimport { flow, types } from \"mobx-state-tree\";\r\n\r\nimport { app, database, storageRef } from \"../services/firebase\";\r\nimport { getContentType } from \"../utils/getContentType\";\r\n\r\nconst STORAGE_KEY_TOKEN = \"token\";\r\n\r\nconst Games = types.model({\r\n  gameTime: types.maybe(types.string),\r\n  data: types.maybe(types.string),\r\n  dataSelecionada: types.maybe(types.string),\r\n  numOfMementos: types.maybe(types.number),\r\n  score: types.maybe(types.number),\r\n});\r\n\r\nconst Memento = types.model({\r\n  desc: types.maybe(types.string),\r\n  data: types.maybe(types.string),\r\n  path: types.maybe(types.string),\r\n  type: types.maybe(types.string),\r\n  url: types.maybe(types.string),\r\n});\r\n\r\nconst Patient = types.model({\r\n  id: types.maybe(types.string),\r\n  name: types.maybe(types.string),\r\n  birthday: types.maybe(types.string),\r\n  cpf: types.maybe(types.string),\r\n  weight: types.maybe(types.string),\r\n  scores: types.array(types.optional(Games, {})),\r\n  mementos: types.array(types.optional(Memento, {})),\r\n});\r\n\r\nconst User = types.model({\r\n  type: types.maybeNull(types.string),\r\n  name: types.maybe(types.string),\r\n  birthday: types.maybe(types.string),\r\n  cpf: types.maybe(types.string),\r\n  uid: types.maybe(types.string),\r\n  patients: types.array(Patient),\r\n});\r\n\r\n// Store that will have all the lembracas from a given paciente\r\nconst UserStore = types\r\n  .model({\r\n    user: types.maybeNull(User),\r\n    token: types.maybe(types.string),\r\n    loading: false,\r\n  })\r\n  .views((self) => ({\r\n    get isAuthorized() {\r\n      return !!self.token;\r\n    },\r\n  }))\r\n  .actions((self) => {\r\n    const fetchUser = flow(function* () {\r\n      self.loading = true;\r\n\r\n      // Try to login with the google default sing in\r\n      try {\r\n        const snapshot = yield database\r\n          .ref(\"users/\" + self.token)\r\n          .once(\"value\");\r\n\r\n        const userSnapshot = snapshot.val();\r\n\r\n        self.user = userSnapshot;\r\n\r\n        const pacientes = yield database.ref(\"pacientes/\").once(\"value\");\r\n\r\n        const pacientesValues = Object.entries(pacientes.val());\r\n\r\n        if (self.user.type === \"Cuidador\") {\r\n          const careGiverPatients = pacientesValues.filter(([key]) =>\r\n            Object.values(userSnapshot.pacientes).some((value) => value === key)\r\n          );\r\n\r\n          self.user.patients = careGiverPatients.map(([key, value]) => {\r\n            const mementos = value.mementos\r\n              ? Object.values(value.mementos)\r\n              : [];\r\n\r\n            const patient = Object.assign(\r\n              {},\r\n              { ...value },\r\n              { id: key },\r\n              { mementos }\r\n            );\r\n            return patient;\r\n          });\r\n        }\r\n\r\n        if (self.user.type === \"Medico\") {\r\n          self.user.patients = pacientesValues.map(([key, value]) => {\r\n            const mementos = value.mementos\r\n              ? Object.values(value.mementos)\r\n              : [];\r\n            const scores = value.scores ? Object.values(value.scores) : [];\r\n\r\n            const patient = Object.assign(\r\n              {},\r\n              { ...value },\r\n              { id: key },\r\n              { mementos, scores }\r\n            );\r\n            return patient;\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n\r\n      self.loading = false;\r\n    });\r\n\r\n    const addMemento = flow(function* (id, memento, desc, file, data, type) {\r\n      try {\r\n        yield new Promise((resolve, reject) => {\r\n          try {\r\n            storageRef\r\n              .child(\"mementos/\" + id + \"/\" + desc)\r\n              .put(file, memento)\r\n              .then(() => {\r\n                resolve(\"Uploaded\");\r\n              });\r\n          } catch (error) {\r\n            reject(\"Error upload!\");\r\n          }\r\n        });\r\n\r\n        storageRef.child(\"mementos/\" + id + \"/\" + desc).updateMetadata(memento);\r\n\r\n        const path = storageRef.child(\"mementos/\" + id + \"/\" + desc).fullPath;\r\n\r\n        // Create a reference to the file we want to download\r\n        const mementoRef = storageRef.child(path);\r\n\r\n        // Get the download URL\r\n        const url = yield mementoRef.getDownloadURL();\r\n\r\n        yield database.ref(\"pacientes/\" + id + \"/mementos\").push({\r\n          desc,\r\n          data,\r\n          path,\r\n          type: getContentType(type),\r\n          url,\r\n        });\r\n\r\n        const patient = self.user.patients.find((patient) => patient.id === id);\r\n\r\n        patient.mementos.push({ desc, path, data, type, url });\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n    });\r\n\r\n    const addScore = flow(function* (id, gameData) {\r\n      try {\r\n        yield database.ref(\"pacientes/\" + id + \"/scores\").push(gameData);\r\n\r\n        const patient = self.user.patients.find((patient) => patient.id === id);\r\n\r\n        patient.scores.push(gameData);\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n    });\r\n\r\n    return { fetchUser, addMemento, addScore };\r\n  })\r\n\r\n  .actions((self) => {\r\n    const initialize = flow(function* (token) {\r\n      self.token = token;\r\n\r\n      if (token) {\r\n        yield self.fetchUser();\r\n      }\r\n    });\r\n\r\n    return {\r\n      initialize,\r\n    };\r\n  })\r\n  .actions((self) => {\r\n    const logout = () => {\r\n      self.token = undefined;\r\n    };\r\n    // Make the login with the API, pass the token that come from google, and set the token generated in th API\r\n    const login = flow(function* ({ email, password }) {\r\n      // Try to login with the google default sing in\r\n      try {\r\n        const authUser = yield app\r\n          .auth()\r\n          .signInWithEmailAndPassword(email, password);\r\n\r\n        const { uid } = authUser.user;\r\n\r\n        yield self.initialize(uid);\r\n\r\n        return {\r\n          response: true,\r\n          message: \"ok\",\r\n        };\r\n      } catch (error) {\r\n        console.error(error.message);\r\n\r\n        return {\r\n          response: false,\r\n          message: error.message,\r\n        };\r\n      }\r\n    });\r\n\r\n    return { login, logout };\r\n  })\r\n\r\n  .actions((self) => {\r\n    const addPatient = flow(function* (patient) {\r\n      try {\r\n        const values = yield database.ref(\"pacientes/\").push(patient);\r\n\r\n        const newPatient = Object.assign(\r\n          {},\r\n          { ...patient },\r\n          { id: values.key }\r\n        );\r\n\r\n        if (self.user.type === \"Cuidador\") {\r\n          const key = values.key;\r\n          yield database\r\n            .ref(\"users/\" + self.token + \"/pacientes\")\r\n            .child(key)\r\n            .set(values.key);\r\n        }\r\n\r\n        self.user.patients.push(newPatient);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    });\r\n\r\n    return {\r\n      addPatient,\r\n    };\r\n  })\r\n\r\n  .actions((self) => ({\r\n    afterCreate: async () => {\r\n      const token = localStorage.getItem(STORAGE_KEY_TOKEN);\r\n\r\n      // Case the token is allready in localsotrage initialize with it\r\n      await self.initialize(token || undefined);\r\n\r\n      autorun(() => {\r\n        if (self.token) {\r\n          localStorage.setItem(STORAGE_KEY_TOKEN, self.token);\r\n        } else {\r\n          localStorage.removeItem(STORAGE_KEY_TOKEN);\r\n        }\r\n      });\r\n    },\r\n  }));\r\n\r\nexport default UserStore;\r\n","import { types } from \"mobx-state-tree\";\r\n\r\nimport LembracaStore from \"./mementoStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\n// Store that will have all the lembracas from a given paciente\r\nconst RootStore = types.model({\r\n  userStore: types.optional(UserStore, {}),\r\n  lembrancaStore: types.optional(LembracaStore, {}),\r\n});\r\n\r\nexport default RootStore.create();\r\n","import { useObserver } from \"mobx-react\";\r\n\r\nimport Store from \"../rootStore\";\r\n\r\nexport const useStore = () => Store;\r\n\r\nexport const useIsAuthorized = () => {\r\n  const store = useStore();\r\n\r\n  return useObserver(() => store.userStore.isAuthorized);\r\n};\r\n\r\nexport const useIsUserLoading = () => {\r\n  const store = useStore();\r\n\r\n  return useObserver(() => store.userStore.loading);\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport styled from \"styled-components\";\r\n\r\nimport ButtonLink from \"../Components/_shared/ButtonLink\";\r\nimport { Container } from \"../Components/_shared/Container\";\r\nimport Logo from \"../Components/Logo\";\r\nimport {\r\n  useIsAuthorized,\r\n  useIsUserLoading,\r\n  useStore,\r\n} from \"../stores/hooks/useStore\";\r\n\r\nconst Navbar = styled.div`\r\n  width: 100vw;\r\n  position: sticky;\r\n\r\n  background-color: #007bff;\r\n`;\r\nconst StyledContainer = styled(Container)`\r\n  padding: 1rem 0;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  color: white;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n\r\n  align-items: center;\r\n`;\r\n\r\nconst NameText = styled.span`\r\n  display: inline-block;\r\n\r\n  font-weight: bold;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst UserChildrenWrapper = styled.div`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst Layout = ({ children }) => {\r\n  const loading = useIsUserLoading();\r\n  const isAuth = useIsAuthorized();\r\n  const store = useStore();\r\n\r\n  const type = store.userStore.user ? store.userStore.user.type : null;\r\n  const name = store.userStore.user ? store.userStore.user.name : null;\r\n\r\n  if (loading) {\r\n    return <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />;\r\n  }\r\n\r\n  if (!isAuth) {\r\n    return <React.Fragment>{children}</React.Fragment>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar>\r\n        <StyledContainer>\r\n          <Wrapper>\r\n            <NameText>{name}</NameText>\r\n            <ButtonWrapper>\r\n              <ButtonLink\r\n                variant=\"primary\"\r\n                label=\"Meus Pacientes\"\r\n                to={`/${type}`}\r\n              />\r\n              <Button\r\n                variant=\"primary\"\r\n                onClick={() => {\r\n                  store.userStore.logout();\r\n                }}\r\n              >\r\n                Sair\r\n              </Button>\r\n            </ButtonWrapper>\r\n          </Wrapper>\r\n        </StyledContainer>\r\n      </Navbar>\r\n      <UserChildrenWrapper>{children}</UserChildrenWrapper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { inject, observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Container } from \"../_shared/Container\";\r\nimport Logo from \"../Logo\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n  min-width: 500px;\r\n  padding: 1rem;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  background-color: #007bff;\r\n  box-shadow: 0 0 1em gray;\r\n  color: white;\r\n  border-radius: 0.5rem;\r\n`;\r\n\r\nconst ButtonsControl = styled(Form)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.props = props;\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  validateForm() {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { email, password } = this.state;\r\n\r\n    const { store, history } = this.props;\r\n\r\n    const { response, message } = await store.userStore.login({\r\n      email,\r\n      password,\r\n    });\r\n\r\n    if (response) {\r\n      history.push(`${store.userStore.user.type}`);\r\n    }\r\n\r\n    if (!response) {\r\n      alert(message);\r\n    }\r\n  };\r\n\r\n  routeChange = () => {\r\n    const { history } = this.props;\r\n    history.push(\"/cadastro\");\r\n  };\r\n\r\n  render() {\r\n    if (this.props.store.userStore.isAuthorized) {\r\n      return <Redirect to={`/${this.props.store.userStore.user.type}`} />;\r\n    }\r\n    return (\r\n      <Container>\r\n        <Wrapper>\r\n          <StyledForm onSubmit={this.handleSubmit} id=\"login\">\r\n            <Logo />\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                autoFocus\r\n                type=\"email\"\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Senha</Form.Label>\r\n              <Form.Control\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                type=\"password\"\r\n              />\r\n            </Form.Group>\r\n            <ButtonsControl>\r\n              <Button\r\n                className=\"btn btn-primary\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n                form=\"login\"\r\n              >\r\n                Login\r\n              </Button>\r\n              <Button className=\"btn btn-primary\" onClick={this.routeChange}>\r\n                Cadastrar\r\n              </Button>\r\n            </ButtonsControl>\r\n          </StyledForm>\r\n        </Wrapper>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(inject(\"store\")(observer(Login)));\r\n","import { inject, observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport { FormControl, FormGroup } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass RegisterPatient extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      birthday: \"\",\r\n      name: \"\",\r\n      cpf: \"\",\r\n      weight: \"\",\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const { birthday, name, cpf, weight } = this.state;\r\n    try {\r\n      this.setState({ loading: true });\r\n      await this.props.store.userStore.addPatient({\r\n        birthday,\r\n        name,\r\n        cpf,\r\n        weight,\r\n      });\r\n      this.setState({ loading: false });\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  handleControl = (e) => {\r\n    const { value, id } = e.target;\r\n    this.setState({ [id]: value });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />;\r\n    }\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <FormGroup>\r\n          <Form.Label>Nome</Form.Label>\r\n          <FormControl\r\n            type=\"name\"\r\n            id=\"name\"\r\n            placeholder=\"Jose da Silva\"\r\n            onChange={this.handleControl}\r\n            onClick={this.handleControl}\r\n            required={true}\r\n          ></FormControl>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Form.Label>Peso</Form.Label>\r\n          <FormControl\r\n            type=\"text\"\r\n            id=\"weight\"\r\n            placeholder=\"peso\"\r\n            onChange={this.handleControl}\r\n            onClick={this.handleControl}\r\n            required={true}\r\n          ></FormControl>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Form.Label>CPF</Form.Label>\r\n          <FormControl\r\n            type=\"text\"\r\n            id=\"cpf\"\r\n            placeholder=\"CPF\"\r\n            onChange={this.handleControl}\r\n            onClick={this.handleControl}\r\n            required={true}\r\n          ></FormControl>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Form.Label>Data de nascimento</Form.Label>\r\n          <FormControl\r\n            type=\"date\"\r\n            id=\"birthday\"\r\n            placeholder=\"Data nascimento\"\r\n            onChange={this.handleControl}\r\n            onClick={this.handleControl}\r\n            required={true}\r\n          ></FormControl>\r\n        </FormGroup>\r\n\r\n        <Button type=\"submit\"> Cadastar </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(inject(\"store\")(observer(RegisterPatient)));\r\n","import moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { withRouter } from \"react-router\";\r\n\r\n// A simple line with the info about the paciente that is under the care of the user\r\nclass LinhaPaciente extends Component {\r\n  routeChange = (e) => {\r\n    const { id } = e.target;\r\n    const { history, patient } = this.props;\r\n\r\n    history.push(`${id}/${patient.id}`);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.name}</td>\r\n        <td>{this.props.weight}Kg</td>\r\n        <td>{this.props.cpf}</td>\r\n        <td>\r\n          {moment(this.props.birthday, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}\r\n        </td>\r\n        <td>\r\n          <Button\r\n            id=\"paciente\"\r\n            className=\"btn btn-primary\"\r\n            onClick={this.routeChange}\r\n          >\r\n            Acessar\r\n          </Button>\r\n        </td>\r\n        <td>\r\n          <Button\r\n            id=\"jogar\"\r\n            className=\"btn btn-primary\"\r\n            onClick={this.routeChange}\r\n          >\r\n            Jogar\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LinhaPaciente);\r\n","import { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { getSnapshot } from \"mobx-state-tree\";\r\nimport React, { Component } from \"react\";\r\nimport { Modal, ModalBody, ModalTitle, Table } from \"react-bootstrap\";\r\nimport ModalHeader from \"react-bootstrap/esm/ModalHeader\";\r\nimport { withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { database } from \"../../services/firebase\";\r\nimport { Container } from \"../_shared/Container\";\r\nimport RegisterPatient from \"../Register/RegisterPatient\";\r\nimport PatientRow from \"../TableRows/PatientRow\";\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  margin-left: 1rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nclass CareGiver extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rows: [],\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n\r\n  handleShow = () => {\r\n    this.setState({ show: true });\r\n  };\r\n\r\n  render() {\r\n    const patients = getSnapshot(this.props.store.userStore.user.patients);\r\n\r\n    if (this.props.store.userStore.user.type !== \"Cuidador\") {\r\n      return <div>Você não pode entrar aqui!</div>;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <Header>\r\n          <h1>Meus pacientes</h1>\r\n          <Icon onClick={this.handleShow} icon={faPlus} />\r\n        </Header>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Nome</th>\r\n              <th scope=\"col\">Peso</th>\r\n              <th scope=\"col\">CPF</th>\r\n              <th scope=\"col\">Data nascimento</th>\r\n              <th scope=\"col\">Acesso ao paciente</th>\r\n              <th scope=\"col\">Jogar</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {patients.map((row, index) => {\r\n              return <PatientRow key={index} patient={row} {...row} />;\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n        <Modal\r\n          show={this.state.show}\r\n          onHide={this.handleClose}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <ModalHeader closeButton>\r\n            <ModalTitle>Novo Paciente</ModalTitle>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <RegisterPatient />\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(inject(\"store\")(observer(CareGiver)));\r\n","import moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { withRouter } from \"react-router\";\r\n\r\n// A simple line with the info about the patient that is under the care of the user\r\nclass LinhaPacienteMedico extends Component {\r\n  routeChange = (e) => {\r\n    const { id } = e.target;\r\n    const { history, patient } = this.props;\r\n\r\n    history.push(`${id}/${patient.id}`);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.name}</td>\r\n        <td>{this.props.weight}Kg</td>\r\n        <td>{this.props.cpf}</td>\r\n        <td>\r\n          {moment(this.props.birthday, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}\r\n        </td>\r\n        <td>\r\n          <Button\r\n            id=\"paciente\"\r\n            className=\"btn btn-primary\"\r\n            onClick={this.routeChange}\r\n          >\r\n            Acessar\r\n          </Button>\r\n        </td>\r\n        <td>\r\n          <Button\r\n            id=\"jogos\"\r\n            className=\"btn btn-primary\"\r\n            onClick={this.routeChange}\r\n          >\r\n            Acessar\r\n          </Button>\r\n        </td>\r\n        <td>\r\n          <Button\r\n            id=\"jogar\"\r\n            className=\"btn btn-primary\"\r\n            onClick={this.routeChange}\r\n          >\r\n            Jogar\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LinhaPacienteMedico);\r\n","import { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { getSnapshot } from \"mobx-state-tree\";\r\nimport React, { Component } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { ModalTitle } from \"react-bootstrap\";\r\nimport { ModalBody } from \"react-bootstrap\";\r\nimport ModalHeader from \"react-bootstrap/esm/ModalHeader\";\r\nimport { withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Container } from \"../_shared/Container\";\r\nimport RegisterPatient from \"../Register/RegisterPatient\";\r\nimport LinhaPacienteMedico from \"../TableRows/DoctorPatientRow\";\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  margin-left: 1rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nclass Doctor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n\r\n  handleShow = () => {\r\n    this.setState({ show: true });\r\n  };\r\n\r\n  render() {\r\n    const patients = getSnapshot(this.props.store.userStore.user.patients);\r\n\r\n    if (this.props.store.userStore.user.type !== \"Medico\") {\r\n      return <div>Você não pode entrar aqui!</div>;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <Header>\r\n          <h1>Meus pacientes</h1>\r\n          <Icon onClick={this.handleShow} icon={faPlus} />\r\n        </Header>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>Nome</th>\r\n              <th>Peso</th>\r\n              <th>CPF</th>\r\n              <th>Data nascimento</th>\r\n              <th>Acesso as lembraças</th>\r\n              <th>Acesso as scores</th>\r\n              <th>Jogar</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {patients.map((row, index) => {\r\n              return <LinhaPacienteMedico key={index} patient={row} {...row} />;\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n        <Modal\r\n          show={this.state.show}\r\n          onHide={this.handleClose}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <ModalHeader closeButton>\r\n            <ModalTitle>Novo Paciente</ModalTitle>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <RegisterPatient />\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(inject(\"store\")(observer(Doctor)));\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PreviewImg = styled.img`\r\n  width: 250px;\r\n  height: 200px;\r\n\r\n  object-fit: contain;\r\n`;\r\n\r\nconst PriviewVideo = styled.video`\r\n  width: 250px;\r\n  height: 200px;\r\n\r\n  object-fit: contain;\r\n`;\r\n\r\nconst MementoRow = ({ type, data, desc, url }) => {\r\n  let preview;\r\n  console.log(type);\r\n\r\n  if (type.includes(\"image\")) {\r\n    preview = <PreviewImg src={url} alt=\"lembrança\" />;\r\n  }\r\n\r\n  if (type.includes(\"video\")) {\r\n    preview = <PriviewVideo controls src={url} />;\r\n  }\r\n  return (\r\n    <tr>\r\n      <td>{preview}</td>\r\n      <td>{desc}</td>\r\n      <td>{moment(data, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default MementoRow;\r\n","import { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { observer } from \"mobx-react\";\r\nimport { getSnapshot } from \"mobx-state-tree\";\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  FormControl,\r\n  FormGroup,\r\n  Modal,\r\n  Table,\r\n} from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useParams } from \"react-router\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useStore } from \"../../stores/hooks/useStore\";\r\nimport { Container } from \"../_shared/Container\";\r\nimport MementoRow from \"../TableRows/MementoRow\";\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  margin-left: 1rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Patient = () => {\r\n  const [show, setShow] = React.useState(false);\r\n  const [uploading, setUploading] = React.useState(false);\r\n  const [patient, setPatient] = React.useState(undefined);\r\n\r\n  const { handleSubmit, register } = useForm();\r\n  const store = useStore();\r\n  const { id } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    const patient = getSnapshot(\r\n      store.userStore.user.patients.find((patient) => patient.id === id)\r\n    );\r\n\r\n    setPatient(patient);\r\n  }, []);\r\n\r\n  const onSubmit = async (formvalues) => {\r\n    const { desc, data } = formvalues;\r\n    const file = formvalues.file[0];\r\n\r\n    if (!desc || !file || !data) {\r\n      alert(\"Todos os campos devem estar preenchidos!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Set its state to uploading, to show the sppiner and the user knows that the file is in upload\r\n      setUploading(true);\r\n\r\n      let { type } = file;\r\n\r\n      const memento = {\r\n        customMetadata: {\r\n          desc,\r\n          data,\r\n        },\r\n      };\r\n\r\n      await store.userStore.addMemento(id, memento, desc, file, data, type);\r\n\r\n      const patient = getSnapshot(\r\n        store.userStore.user.patients.find((patient) => patient.id === id)\r\n      );\r\n\r\n      setPatient(patient);\r\n\r\n      setShow(false);\r\n      setUploading(false);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  if (!patient) return <div>Paciente nao encontrado</div>;\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <h1>Lembranças de {patient.name}</h1>\r\n        <Icon onClick={() => setShow(true)} icon={faPlus} />\r\n      </Header>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Lembrança</th>\r\n            <th scope=\"col\">Descrição</th>\r\n            <th scope=\"col\">Data</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {patient.mementos.map((row, index) => {\r\n            return <MementoRow key={index} {...row} />;\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n      <Modal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton={!uploading}>\r\n          <Modal.Title>Envio de lembraça</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {uploading ? (\r\n            <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\r\n          ) : (\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup>\r\n                <Form.Label>Descrição</Form.Label>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"desc\"\r\n                  placeholder=\"Decrição da lembraça\"\r\n                  ref={register}\r\n                  required={true}\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Form.Label>Data da lembrança</Form.Label>\r\n                <FormControl\r\n                  type=\"date\"\r\n                  name=\"data\"\r\n                  placeholder=\"Data de ocorrencia\"\r\n                  ref={register}\r\n                  required={true}\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Form.Label>Arquivo da lembrança (video ou imagem)</Form.Label>\r\n                <FormControl\r\n                  type=\"file\"\r\n                  name=\"file\"\r\n                  accept=\".mp4,.avi,.png,.jpeg\"\r\n                  placeholder=\"Selecione a lembrança\"\r\n                  ref={register}\r\n                  required={true}\r\n                />\r\n              </FormGroup>\r\n\r\n              <Button type=\"submit\" variant=\"primary\">\r\n                Enviar\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(Patient);\r\n","import React from \"react\";\r\n\r\nconst ScoreRow = ({ data, gameTime, score, numOfMementos }) => {\r\n  return (\r\n    <tr>\r\n      <td>{score}</td>\r\n      <td>{numOfMementos}</td>\r\n      <td>{gameTime}</td>\r\n      <td>{data}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ScoreRow;\r\n","import { inject, observer } from \"mobx-react\";\r\nimport { getSnapshot } from \"mobx-state-tree\";\r\nimport React, { Component } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Container } from \"../_shared/Container\";\r\nimport ScoreRow from \"../TableRows/ScoreRow\";\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nclass Score extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      jogos: [],\r\n      patient: undefined,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.patient) return null;\r\n\r\n    const { name } = this.state.patient;\r\n\r\n    return (\r\n      <Container>\r\n        <Header>\r\n          <h1>Scores de {name}</h1>\r\n        </Header>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Acertos</th>\r\n              <th scope=\"col\">Numero de lembranças</th>\r\n              <th scope=\"col\">Tempo de jogo (mm:ss)</th>\r\n              <th scope=\"col\">Data do jogo</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.patient.scores.map((score, index) => {\r\n              return <ScoreRow key={index} {...score} />;\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const id = this.props.match.params.id;\r\n    const patient = this.props.store.userStore.user.patients.find(\r\n      (userPatient) => userPatient.id === id\r\n    );\r\n\r\n    this.setState({\r\n      patient: patient ? getSnapshot(patient) : undefined,\r\n    });\r\n  }\r\n}\r\n\r\nexport default withRouter(inject(\"store\")(observer(Score)));\r\n","import React from \"react\";\r\nimport { FormControl, FormGroup } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useHistory, withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { app, database } from \"../../services/firebase\";\r\nimport { Container } from \"../_shared/Container\";\r\nimport Logo from \"../Logo\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n  min-width: 500px;\r\n  padding: 1rem;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  background-color: #007bff;\r\n  box-shadow: 0 0 1em gray;\r\n  color: white;\r\n  border-radius: 0.5rem;\r\n`;\r\n\r\nconst Register = () => {\r\n  const { handleSubmit, register } = useForm();\r\n  const history = useHistory();\r\n  const [isRegister, setIsRegister] = React.useState(false);\r\n\r\n  const onSubmit = async (data) => {\r\n    const { email, password, birthday, name, cpf, type } = data;\r\n    setIsRegister(true);\r\n    //Try to push data to the firebase after it creates a user by the default google createUser's\r\n    try {\r\n      const authUser = await app\r\n        .auth()\r\n        .createUserWithEmailAndPassword(email, password);\r\n\r\n      // Create a user in your Firebase realtime database\r\n      await database.ref(\"users/\" + authUser.user.uid).set({\r\n        name,\r\n        email,\r\n        birthday,\r\n        cpf,\r\n        type,\r\n      });\r\n\r\n      setIsRegister(false);\r\n\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  if (isRegister) {\r\n    return <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />;\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <StyledForm onSubmit={handleSubmit(onSubmit)}>\r\n          <Logo />\r\n          <FormGroup>\r\n            <Form.Label>Email</Form.Label>\r\n            <FormControl\r\n              type=\"email\"\r\n              autoComplete=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"name@example.com\"\r\n              ref={register}\r\n              required={true}\r\n            ></FormControl>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Form.Label>Senha</Form.Label>\r\n            <FormControl\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"senha\"\r\n              ref={register}\r\n              required={true}\r\n            ></FormControl>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Form.Label>Nome</Form.Label>\r\n            <FormControl\r\n              type=\"name\"\r\n              id=\"name\"\r\n              name=\"name\"\r\n              placeholder=\"Nome\"\r\n              ref={register}\r\n              required={true}\r\n            ></FormControl>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Form.Label>CPF</Form.Label>\r\n            <FormControl\r\n              type=\"text\"\r\n              id=\"cpf\"\r\n              name=\"cpf\"\r\n              placeholder=\"CPF\"\r\n              ref={register}\r\n              required={true}\r\n            ></FormControl>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Form.Label>Data nascimento </Form.Label>\r\n            <FormControl\r\n              type=\"date\"\r\n              id=\"birthday\"\r\n              name=\"birthday\"\r\n              placeholder=\"Data nascimento\"\r\n              ref={register}\r\n              required={true}\r\n            ></FormControl>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Form.Label>Tipo de usuario</Form.Label>\r\n            <FormControl\r\n              as=\"select\"\r\n              id=\"type\"\r\n              name=\"type\"\r\n              ref={register}\r\n              required={true}\r\n              defaultValue=\"Medico\"\r\n            >\r\n              <option>Medico</option>\r\n              <option>Cuidador</option>\r\n            </FormControl>\r\n          </FormGroup>\r\n          <Button type=\"submit\"> Cadastar </Button>\r\n        </StyledForm>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withRouter(Register);\r\n","export function getScore(gameData) {\r\n   const { gapCorreto, gapSelecionado } = gameData;\r\n   \r\n   if (gapCorreto === gapSelecionado) return 1;\r\n\r\n   return 0;\r\n}","import chunck from \"lodash/chunk\";\r\nimport shuffle from \"lodash/shuffle\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { getSnapshot } from \"mobx-state-tree\";\r\nimport moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\n\r\nimport { getScore } from \"./utils/getScores\";\r\n\r\nconst millisecondsToMinutesSeconds = (ms) => {\r\n  let duration = moment.duration(ms, \"milliseconds\");\r\n  let fromMinutes = Math.floor(duration.asMinutes());\r\n  let fromSeconds = Math.floor(duration.asSeconds() - fromMinutes * 60);\r\n\r\n  return Math.floor(duration.asSeconds()) >= 60\r\n    ? (fromMinutes <= 9 ? \"0\" + fromMinutes : fromMinutes) +\r\n        \":\" +\r\n        (fromSeconds <= 9 ? \"0\" + fromSeconds : fromSeconds)\r\n    : \"00:\" + (fromSeconds <= 9 ? \"0\" + fromSeconds : fromSeconds);\r\n};\r\n\r\nlet viewWidth = window.innerWidth;\r\nlet viewHeight = window.innerHeight;\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ready: false,\r\n      gameSpecs: undefined,\r\n      initGame: Date.now(),\r\n      done: false,\r\n    };\r\n  }\r\n\r\n  // Handle called after a message from the iframe (game)\r\n  handleFrameTasks = async (e) => {\r\n    const { fnName } = e.data;\r\n    const { ready, gameSpecs } = this.state;\r\n    const store = this.props.store.userStore;\r\n    const id = this.props.match.params.id;\r\n\r\n    // Here we need to check if the fnName is that one, it secure that the game is allreadt loaded and the data for it is done\r\n    if (fnName === \"returnJson\" && ready) {\r\n      // Simulate a message type for the Rex_FrameMessage addon in the construct game\r\n      const CMD_FNRTN = \"Rex_FrameMessage.Return\";\r\n      const data = {\r\n        type: CMD_FNRTN,\r\n        sender: '\"\"',\r\n        fnName: \"returnJson\",\r\n        value: JSON.stringify(gameSpecs),\r\n      };\r\n\r\n      this.ifr.contentWindow.postMessage(data, \"*\");\r\n    }\r\n\r\n    if (fnName === \"endGame\" && ready) {\r\n      const { data } = e;\r\n      const [jsonData] = data.params;\r\n\r\n      const gameData = JSON.parse(jsonData);\r\n      if (window.confirm(\"Jogo finalizado, deseja salvar os dados?\")) {\r\n        const arrayData = Object.values(gameData);\r\n        let score = 0;\r\n\r\n        for (const data of arrayData) {\r\n          score += getScore(data);\r\n        }\r\n\r\n        const gameScore = {\r\n          score,\r\n          numOfMementos: arrayData.length,\r\n          data: moment().format(\"DD/MM/YYYY\"),\r\n          gameTime: millisecondsToMinutesSeconds(\r\n            Date.now() - this.state.initGame\r\n          ),\r\n        };\r\n\r\n        await store.addScore(id, gameScore);\r\n      } else {\r\n        alert(\"Jogo não salvo nos scores!\");\r\n      }\r\n\r\n      this.setState({ done: true });\r\n    }\r\n  };\r\n\r\n  onWindowResize = () => {\r\n    viewWidth = window.innerWidth;\r\n    viewHeight = window.innerHeight;\r\n\r\n    this.ifr.width = viewWidth;\r\n    this.ifr.height = viewHeight;\r\n  };\r\n\r\n  render() {\r\n    const { ready } = this.state;\r\n\r\n    if (this.state.done) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    if (!this.state.gameSpecs)\r\n      return (\r\n        <div>\r\n          Não é possivel criar um jogo, número insufiiciente de lembranças!\r\n        </div>\r\n      );\r\n\r\n    if (ready) {\r\n      return (\r\n        <iframe\r\n          ref={(f) => (this.ifr = f)}\r\n          id=\"game\"\r\n          title=\"game\"\r\n          src=\"../game/\"\r\n          width={viewWidth}\r\n          height={viewHeight}\r\n        ></iframe>\r\n      );\r\n    }\r\n\r\n    if (!ready) {\r\n      return <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />;\r\n    }\r\n  }\r\n\r\n  // After the component update, load all the data for the game we set a listner for the ifram messages\r\n  componentDidUpdate() {\r\n    if (this.ifr) {\r\n      this.ifr.onload = () => {\r\n        window.addEventListener(\"message\", this.handleFrameTasks);\r\n      };\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"message\", this.handleFrameTasks);\r\n    window.removeEventListener(\"resize\", this.onWindowResize);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const id = this.props.match.params.id;\r\n    const patient = this.props.store.userStore.user.patients.find(\r\n      (userPatient) => userPatient.id === id\r\n    );\r\n\r\n    if (!patient || patient.mementos.length < 3) {\r\n      this.setState({ gameSpecs: undefined });\r\n      return;\r\n    }\r\n\r\n    const gameSpecs = {};\r\n    const { name, cpf } = patient;\r\n\r\n    const mementos = getSnapshot(patient.mementos);\r\n\r\n    let shuffledMementos = shuffle(mementos);\r\n    // Make sure that the memento do not pass 5\r\n    if (shuffledMementos.length > 5) {\r\n      [shuffledMementos] = chunck(shuffledMementos, 5);\r\n    }\r\n\r\n    Object.assign(gameSpecs, {\r\n      nome: name,\r\n      cpf,\r\n      size: shuffledMementos.length - 1,\r\n    });\r\n\r\n    for (const [\r\n      index,\r\n      { desc, data, type, url },\r\n    ] of shuffledMementos.entries()) {\r\n      const lembracaStr = `{\"${index}\":{\"desc\": \"${desc}\", \"data\": \"${data}\", \"type\": \"${type}\", \"url\": \"${url}\"}}`;\r\n      const lembracaObj = JSON.parse(lembracaStr);\r\n\r\n      Object.assign(gameSpecs, lembracaObj);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", this.onWindowResize, false);\r\n\r\n    this.setState({\r\n      ready: true,\r\n      gameSpecs: gameSpecs,\r\n    });\r\n  }\r\n}\r\n\r\nexport default withRouter(inject(\"store\")(observer(Game)));\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router\";\r\n\r\nimport { useIsAuthorized } from \"../stores/hooks/useStore\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const isAuthorized = useIsAuthorized();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAuthorized ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to={{ pathname: \"/\" }} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\n\r\nimport Login from \"../Components/Login/Login\";\r\nimport Caregiver from \"../Components/Paginas/CareGiver\";\r\nimport Doctor from \"../Components/Paginas/Doctor\";\r\nimport Patient from \"../Components/Patient/Patient\";\r\nimport Scores from \"../Components/Patient/Scores\";\r\nimport Register from \"../Components/Register/Register\";\r\nimport RegisterPatient from \"../Components/Register/RegisterPatient\";\r\nimport Game from \"../Game\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Login} />\r\n      <Route exact path=\"/cadastro\" component={Register} />\r\n      <PrivateRoute exact path=\"/cuidador\" component={Caregiver} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/cadastropaciente\"\r\n        component={RegisterPatient}\r\n      />\r\n      <PrivateRoute exact path=\"/paciente/:id\" component={Patient} />\r\n      <PrivateRoute exact path=\"/jogar/:id\" component={Game} />\r\n      <PrivateRoute exact path=\"/jogos/:id\" component={Scores} />\r\n      <PrivateRoute exact path=\"/medico\" component={Doctor} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import { Provider } from \"mobx-react\";\r\nimport React from \"react\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n\r\nimport Layout from \"./layout\";\r\nimport Routes from \"./routes\";\r\nimport rootStore from \"./stores/rootStore\";\r\n\r\nconst basePath = process.env.BASE_PATH || \"/\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router basename={basePath}>\r\n      <Provider store={rootStore}>\r\n        <Layout>\r\n          <Routes />\r\n        </Layout>\r\n      </Provider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"video-react/dist/video-react.css\";\r\n\r\nimport \"./index.css\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}